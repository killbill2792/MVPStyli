import React, { createContext, useContext, useMemo, useEffect, useState } from 'react';
import { SafeAreaView, View, Text, Pressable, Image, FlatList, StyleSheet, Alert, StatusBar, TextInput, ScrollView } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { customAlphabet } from 'nanoid/non-secure';

/** MVPStyli — Production build with Supabase + Vercel */

const nano = customAlphabet('ABCDEFGHJKLMNPQRSTUVWXYZ23456789', 8);
const Ctx = createContext(null);
function rid() { return nano(); }

const initial = {
  route: 'auth',
  params: {},
  user: null,
  twinUri: null,
  products: [
    { id: 'denim-jacket', title: 'ASOS Denim Jacket', price: 69, rating: 4.6, image: 'https://images.unsplash.com/photo-1519085360753-af0119f7cbe7?q=80&auto=format&fit=crop&w=1200' },
    { id: 'black-blazer', title: 'Zara Black Blazer', price: 119, rating: 4.4, image: 'https://images.unsplash.com/photo-1503342217505-b0a15cf70489?q=80&auto=format&fit=crop&w=1200' },
    { id: 'silk-dress', title: 'COS Silk Dress', price: 159, rating: 4.7, image: 'https://images.unsplash.com/photo-1544441893-675973e31985?q=80&auto=format&fit=crop&w=1200' },
    { id: 'white-sneakers', title: 'Nike Air Force 1', price: 90, rating: 4.8, image: 'https://images.unsplash.com/photo-1549298916-b41d501d3772?q=80&auto=format&fit=crop&w=1200' },
    { id: 'leather-bag', title: 'Coach Leather Tote', price: 295, rating: 4.5, image: 'https://images.unsplash.com/photo-1553062407-98eeb64c6a62?q=80&auto=format&fit=crop&w=1200' },
    { id: 'knit-sweater', title: 'Uniqlo Cashmere', price: 79, rating: 4.3, image: 'https://images.unsplash.com/photo-1434389677669-e08b4cac3105?q=80&auto=format&fit=crop&w=1200' },
    { id: 'midi-skirt', title: 'H&M Midi Skirt', price: 35, rating: 4.2, image: 'https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?q=80&auto=format&fit=crop&w=1200' },
    { id: 'leather-jacket', title: 'AllSaints Biker', price: 450, rating: 4.9, image: 'https://images.unsplash.com/photo-1551028719-00167b16eac5?q=80&auto=format&fit=crop&w=1200' },
    { id: 'silk-scarf', title: 'Hermès Silk Scarf', price: 425, rating: 4.7, image: 'https://images.unsplash.com/photo-1601925260369-0b0b0b0b0b0b?q=80&auto=format&fit=crop&w=1200' },
    { id: 'high-heels', title: 'Jimmy Choo Pumps', price: 595, rating: 4.8, image: 'https://images.unsplash.com/photo-1543163521-1bf539c55dd2?q=80&auto=format&fit=crop&w=1200' },
    { id: 'crop-top', title: 'Zara Crop Top', price: 25, rating: 4.1, image: 'https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?q=80&auto=format&fit=crop&w=1200' },
    { id: 'wide-pants', title: 'COS Wide Pants', price: 89, rating: 4.4, image: 'https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?q=80&auto=format&fit=crop&w=1200' }
  ],
  currentProductId: 'denim-jacket',
  looks: [{ id: 'l1', uri: 'https://images.unsplash.com/photo-1520975916090-3105956dac38?q=80&auto=format&fit=crop&w=1200' }],
  rooms: []
};

export function AppProvider({ children }) {
  const [state, setState] = useState(initial);
  
  const api = useMemo(() => ({
    state,
    setRoute: (route, params) => setState(s => ({ ...s, route, params: params || {} })),
    setUser: (user) => setState(s => ({ ...s, user })),
    setTwinUri: (uri) => setState(s => ({ ...s, twinUri: uri })),
    setCurrentProduct: (id) => setState(s => ({ ...s, currentProductId: id })),
    createRoom: ({ lookId, mode, durationMins = 60, title }) => {
      const room = {
        id: rid(),
        lookId,
        mode,
        title: title || mode,
        expiresAt: Date.now() + durationMins * 60 * 1000,
        status: 'active',
        votes: { yes: 0, maybe: 0, no: 0 }
      };
      setState(s => ({ ...s, rooms: [room, ...s.rooms] }));
      return room;
    },
    vote: (roomId, label) => setState(s => ({
      ...s,
      rooms: s.rooms.map(r => r.id === roomId ? { ...r, votes: { ...r.votes, [label]: r.votes[label] + 1 } } : r)
    })),
    tick: () => setState(s => ({
      ...s,
      rooms: s.rooms.map(r => (Date.now() > r.expiresAt && r.status === 'active') ? { ...r, status: 'expired' } : r)
    }))
  }), [state]);
  
  return <Ctx.Provider value={api}>{children}</Ctx.Provider>;
}

export const useApp = () => useContext(Ctx);

export default function App() {
  return (
    <AppProvider>
      <Shell />
    </AppProvider>
  );
}

function Shell() {
  const { state: { route }, setRoute } = useApp();
  
  return (
    <SafeAreaView style={s.app}>
      <StatusBar barStyle="light-content" />
      <ScrollView style={s.container} showsVerticalScrollIndicator={false}>
        {route === 'auth' && <AuthScreen onDone={() => setRoute('onboarding')} />}
        {route === 'onboarding' && <Onboarding />}
        {route === 'shop' && <Shop />}
        {route === 'product' && <Product />}
        {route === 'tryon' && <TryOn />}
        {route === 'askhelp' && <AskHelp />}
        {route === 'createpod' && <CreatePod />}
        {route === 'rooms' && <RoomsInbox />}
        {route === 'room_owner' && <RoomOwner />}
        {route === 'room_guest' && <RoomGuest />}
        {route === 'recap' && <Recap />}
        {route === 'feed' && <Feed />}
        {route === 'account' && <AccountScreen />}
      </ScrollView>
      {/* Show navigation for all screens except auth */}
      {route !== 'auth' && <BottomBar route={route} go={setRoute} />}
    </SafeAreaView>
  );
}

/* BottomBar — minimal */
function BottomBar({ route, go }) {
  const items = [
    ['shop', 'Shop'], ['feed', 'Feed'], ['tryon', 'Try-On'], ['rooms', 'Rooms']
  ];
  return (
    <View style={{
      position: 'absolute', left: 0, right: 0, bottom: 12,
      alignItems: 'center'
    }}>
      <View style={{
        flexDirection: 'row', gap: 10, backgroundColor: 'rgba(255,255,255,0.06)',
        borderColor: 'rgba(255,255,255,0.08)', borderWidth: 1, borderRadius: 9999,
        paddingHorizontal: 10, paddingVertical: 8
      }}>
        {items.map(([k, label]) => (
          <Pressable
            key={k}
            onPress={() => go(k)}
            style={{
              paddingHorizontal: 14, paddingVertical: 8, borderRadius: 9999,
              backgroundColor: route === k ? '#fff' : 'transparent'
            }}
          >
            <Text style={{
              color: route === k ? '#000' : '#d4d4d8',
              fontWeight: route === k ? '700' : '500'
            }}>{label}</Text>
          </Pressable>
        ))}
      </View>
    </View>
  );
}

/* ---------------- Screens ---------------- */
function AuthScreen({ onDone }) {
  const [email, setEmail] = useState('');
  
  const anon = async () => {
    try {
      // Mock auth for now - just continue
      onDone();
    } catch (error) {
      console.error('Auth error:', error);
      onDone(); // Continue anyway for demo
    }
  };
  
  const magic = async () => {
    try {
      // Mock magic link for now
      Alert.alert('Magic Link', 'Check your email for the magic link!');
      onDone();
    } catch (error) {
      console.error('Magic link error:', error);
      onDone(); // Continue anyway for demo
    }
  };
  
  return (
    <View style={{ gap: 12, padding: 16 }}>
      <Text style={{ color: '#e4e4e7', fontSize: 18, fontWeight: '700' }}>Sign in</Text>
      <Pressable 
        onPress={anon} 
        style={{ backgroundColor: '#fff', padding: 12, borderRadius: 12, alignItems: 'center' }}
      >
        <Text>Continue as Guest</Text>
      </Pressable>
      <View style={{ backgroundColor: 'rgba(255,255,255,0.06)', padding: 12, borderRadius: 12 }}>
        <TextInput 
          value={email} 
          onChangeText={setEmail} 
          placeholder="email@domain.com" 
          placeholderTextColor="#9ca3af" 
          style={{ color: '#e4e4e7' }} 
        />
        <Pressable 
          onPress={magic} 
          style={{ backgroundColor: 'rgba(255,255,255,0.2)', padding: 10, borderRadius: 10, marginTop: 8 }}
        >
          <Text style={{ color: '#fff' }}>Send Magic Link</Text>
        </Pressable>
      </View>
    </View>
  );
}

function Onboarding() {
  const { setTwinUri, setRoute, state: { twinUri } } = useApp();
  
  const pick = async () => {
    try {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission required', 'Allow photo access.');
        return;
      }
      
      const res = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: [ImagePicker.MediaType.Images],
        quality: 0.9
      });
      
      if (!res.canceled) {
        // For demo, just use the local URI
        setTwinUri(res.assets[0].uri);
        Alert.alert('Success', 'Photo uploaded successfully!');
      }
    } catch (error) {
      console.error('Upload error:', error);
      Alert.alert('Upload failed', 'Please try again.');
    }
  };
  
  const next = () => {
    if (twinUri) {
      setRoute('shop');
    } else {
      Alert.alert('Upload required', 'Please upload your photo.');
    }
  };
  
  return (
    <View style={s.grid2}>
      <Card>
        <Text style={s.h1}>Create Your Twin</Text>
        <Text style={s.muted}>Upload a clear photo. Everything else is optional.</Text>
        <View style={{ height: 12 }} />
        <Pressable style={s.inputBox} onPress={pick}>
          <Text style={s.label}>Upload Photo <Text style={{ color: '#f87171' }}>(required)</Text></Text>
          <Text style={s.inputHint}>Tap to choose from gallery</Text>
        </Pressable>
        <View style={{ height: 12 }} />
        <Pressable
          onPress={next}
          style={[s.btn, s.btnPrimary, !twinUri && { opacity: 0.5 }]}
          disabled={!twinUri}
        >
          <Text style={s.btnPrimaryText}>Continue →</Text>
        </Pressable>
      </Card>
      <Card>
        <Text style={s.h1}>Preview</Text>
        <View style={s.full}>
          <Image
            source={{ uri: twinUri || 'https://images.unsplash.com/photo-1520975916090-3105956dac38?q=80&auto=format&fit=crop&w=900' }}
            resizeMode="cover"
            style={StyleSheet.absoluteFillObject}
          />
        </View>
        <Text style={s.help}>Full-screen imagery for an AI-first feel.</Text>
      </Card>
    </View>
  );
}

function AccountScreen() {
  const [user, setUser] = useState(null);
  
  const signOut = async () => {
    try {
      // Mock sign out
      Alert.alert('Signed Out', 'You have been signed out.');
    } catch (error) {
      console.error('Sign out error:', error);
    }
  };
  
  return (
    <View style={{ gap: 12, padding: 16 }}>
      <Text style={{ color: '#e4e4e7', fontSize: 18, fontWeight: '700' }}>Account</Text>
      <Text style={{ color: '#a1a1aa' }}>Guest session</Text>
      <Pressable 
        onPress={signOut} 
        style={{ backgroundColor: 'rgba(255,255,255,0.12)', padding: 10, borderRadius: 10 }}
      >
        <Text style={{ color: '#fff' }}>Sign out</Text>
      </Pressable>
    </View>
  );
}

function Shop() {
  const { state: { products }, setCurrentProduct, setRoute } = useApp();
  
  return (
    <View style={s.grid2}>
      <Card style={{ flex: 1 }}>
        <Text style={s.h1}>Curated for You</Text>
        <FlatList
          data={products}
          keyExtractor={(i) => i.id}
          numColumns={2}
          columnWrapperStyle={{ gap: 12 }}
          ItemSeparatorComponent={() => <View style={{ height: 12 }} />}
          scrollEnabled={false}
          renderItem={({ item }) => (
            <Pressable
              onPress={() => { setCurrentProduct(item.id); setRoute('product'); }}
              style={s.productCard}
              accessibilityLabel={`Open ${item.title}`}
            >
              <View style={s.fullSmall}>
                <Image source={{ uri: item.image }} resizeMode="cover" style={StyleSheet.absoluteFillObject} />
              </View>
              <View style={{ padding: 10 }}>
                <Text style={s.productTitle}>{item.title}</Text>
                <Text style={s.productMeta}>${item.price} • {item.rating}★</Text>
              </View>
            </Pressable>
          )}
        />
      </Card>
      <Card style={{ width: '100%', maxWidth: 420 }}>
        <Text style={s.h2}>Trending Tags</Text>
        <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 8, marginTop: 8 }}>
          {['#street', '#monochrome', '#y2k', '#partyfit', '#cozy'].map(t => <Tag key={t} text={t} />)}
        </View>
        <Text style={[s.h2, { marginTop: 16 }]}>Best Time to Post</Text>
        <Text style={s.muted}>Peers engage most 7–9pm. Get validation first → then buy.</Text>
      </Card>
    </View>
  );
}

function Product() {
  const { state: { products, currentProductId }, setRoute } = useApp();
  const [cleanUrl, setCleanUrl] = useState(undefined);
  const p = products.find(x => x.id === currentProductId) || products[0];
  
  useEffect(() => {
    // Mock garment cleaning - just use original image
    setCleanUrl(p.image);
  }, [p]);
  
  return (
    <View style={{ gap: 14 }}>
      <View style={s.full}>
        <Image source={{ uri: p.image }} resizeMode="cover" style={StyleSheet.absoluteFillObject} />
        <View style={s.topPill}><Text style={s.topPillText}>{p.title}</Text></View>
        <Pressable
          onPress={() => setRoute('tryon')}
          style={[s.btn, s.btnPrimary, s.btnFloating]}
          accessibilityLabel="Try this on"
        >
          <Text style={s.btnPrimaryText}>Try On</Text>
        </Pressable>
      </View>
      
      <View style={[s.card, { padding: 16, borderRadius: 24 }]}>
        <View style={s.rowBetween}>
          <Text style={{ color: '#e4e4e7', fontWeight: '700', fontSize: 16 }}>${p.price}</Text>
          <Text style={s.muted}>{p.rating}★ · Free returns</Text>
        </View>
        <Text style={s.muted}>Fabric: Cotton blend • Care: Machine wash cold</Text>
        <Text style={s.muted}>Shipping: 2–4 days • Returns: 30 days</Text>
        
        <View style={s.row}>
          <Pressable
            disabled={!cleanUrl}
            onPress={() => setRoute('tryon')}
            style={[s.btn, s.btnPrimary, { flex: 1 }]}
          >
            <Text style={s.btnPrimaryText}>{cleanUrl ? 'Try On' : 'Preparing…'}</Text>
          </Pressable>
          <Pressable
            onPress={() => setRoute('askhelp')}
            style={[s.btn, s.btnGhost, { flex: 1 }]}
          >
            <Text>Ask for Help</Text>
          </Pressable>
        </View>
        <Pressable onPress={() => setRoute('shop')}><Text style={s.link}>Back to shop</Text></Pressable>
      </View>
    </View>
  );
}

function TryOn() {
  const { state: { twinUri, products, currentProductId }, setRoute } = useApp();
  const [showAI, setShowAI] = useState(true);
  const [showSuggest, setShowSuggest] = useState(false);
  const [busy, setBusy] = useState(false);
  const [result, setResult] = useState(undefined);
  
  const p = products.find(x => x.id === currentProductId) || products[0];
  const personUrl = twinUri || 'https://images.unsplash.com/photo-1520975916090-3105956dac38?q=80&auto=format&fit=crop&w=1200';
  
  const apply = async () => {
    try {
      setBusy(true);
      // Mock try-on - just show a success message
      await new Promise(resolve => setTimeout(resolve, 2000));
      setResult(personUrl); // For demo, just use the person image
      Alert.alert('Success', 'Try-on completed! (Demo mode)');
    } catch (e) {
      Alert.alert('Try-On', 'Try-on failed. Please try again.');
    } finally {
      setBusy(false);
    }
  };
  
  return (
    <View style={{ alignItems: 'center' }}>
      <View style={s.full}>
        <Image
          source={{ uri: result || personUrl }}
          resizeMode="cover"
          style={StyleSheet.absoluteFillObject}
        />
        <View style={s.gradDown} />
        
        <View style={s.rail}>
          <RailIcon icon="📈" onPress={() => { setShowAI(v => !v); setShowSuggest(false); }} />
          <RailIcon icon="💬" onPress={() => setRoute('askhelp')} />
          <RailIcon icon="🧩" onPress={() => { setShowSuggest(v => !v); setShowAI(false); }} />
        </View>
        
        {showAI && (
          <Glass style={{ position: 'absolute', right: 12, top: 12, width: 220 }}>
            <Text style={{ color: '#e4e4e7', fontWeight: '700', marginBottom: 6 }}>AI Analytics</Text>
            <StatBar label="Confidence" value={82} />
            <Text style={{ color: '#a1a1aa', fontSize: 12, marginTop: 6 }}>Fit tips:</Text>
            <Text style={{ color: '#e4e4e7', fontSize: 12 }}>• Shorten hem 2cm{'\n'}• Add belt to define waist</Text>
            <View style={{ height: 8 }} />
            <Text style={{ color: '#a1a1aa', fontSize: 12 }}>Focus regions:</Text>
            <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 6, marginTop: 6 }}>
              {['Shoulder', 'Hem', 'Waist'].map(t => (
                <View key={t} style={{ backgroundColor: 'rgba(255,255,255,0.1)', borderRadius: 9999, paddingHorizontal: 8, paddingVertical: 4 }}>
                  <Text style={{ color: '#d4d4d8', fontSize: 11 }}>{t}</Text>
                </View>
              ))}
            </View>
          </Glass>
        )}
        
        {showSuggest && (
          <Glass style={{ position: 'absolute', right: 12, top: 12, width: 220 }}>
            <Text style={{ color: '#e4e4e7', fontWeight: '700', marginBottom: 6 }}>Suggestions</Text>
            <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 8 }}>
              {['White sneakers', 'Crossbody bag', 'Denim overshirt', 'Pearl studs'].map(t => (
                <View key={t} style={{ backgroundColor: 'rgba(255,255,255,0.1)', borderRadius: 12, paddingHorizontal: 10, paddingVertical: 6 }}>
                  <Text style={{ color: '#d4d4d8', fontSize: 12 }}>{t}</Text>
                </View>
              ))}
            </View>
          </Glass>
        )}
        
        <View style={s.bottomLeft}>
          <Pressable
            onPress={apply}
            style={[s.btn, s.btnPrimary]}
            disabled={busy}
          >
            <Text style={s.btnPrimaryText}>{busy ? 'Generating…' : 'Apply Outfit'}</Text>
          </Pressable>
          <Pressable
            onPress={() => setRoute('product')}
            style={[s.btn, s.btnGhost]}
          >
            <Text>Change Dress</Text>
          </Pressable>
        </View>
      </View>
    </View>
  );
}

function AskHelp() {
  const { setRoute } = useApp();
  const [mode, setMode] = useState(null);
  const [duration, setDuration] = useState(60);
  
  const choose = (m) => {
    setMode(m);
    if (m === 'twins') setDuration(5);
  };
  
  const next = () => setRoute('createpod', { mode: mode || 'friends', title: 'Rooftop party fit', duration });
  
  const Option = ({ id, title, desc }) => (
    <Pressable
      onPress={() => choose(id)}
      style={[s.card, { padding: 16, borderRadius: 20 }, mode === id && { borderColor: '#fff' }]}
    >
      <Text style={{ fontWeight: '700', color: '#e4e4e7' }}>{title}</Text>
      <Text style={s.muted}>{desc}</Text>
    </Pressable>
  );
  
  return (
    <View style={{ gap: 14 }}>
      <Text style={s.h1}>Who should weigh in?</Text>
      <Option id="friends" title="👥 Friends Only" desc="Trusted circle. Private & collaborative." />
      <Option id="twins" title="🧬 Taste Twins" desc="Anonymous quick signal (~5 min). No chat." />
      <Option id="broader" title="�� Broader Perspectives" desc="Cross-culture / general audience." />
      <Option id="mix" title="✨ Mix Mode" desc="Friends + AI-picked twins." />
      
      {(mode === 'friends' || mode === 'broader' || mode === 'mix') && (
        <View style={[s.card, { padding: 16, borderRadius: 20 }]}>
          <Text style={s.label}>Duration: <Text style={{ color: '#e4e4e7', fontWeight: '700' }}>{duration} mins</Text></Text>
          <View style={{ height: 10 }} />
          <View style={{ height: 4, backgroundColor: 'rgba(255,255,255,0.12)', borderRadius: 9999 }}>
            <View style={{ width: `${Math.min(duration, 120) / 1.2}%`, height: 4, backgroundColor: '#fff', borderRadius: 9999 }} />
          </View>
          <View style={{ flexDirection: 'row', gap: 8, marginTop: 10 }}>
            {[15, 30, 60, 120].map(v => (
              <Pressable key={v} onPress={() => setDuration(v)} style={[s.btn, s.btnGhost]}><Text>{v}m</Text></Pressable>
            ))}
          </View>
        </View>
      )}
      
      <View style={{ flexDirection: 'row', gap: 8 }}>
        <Pressable onPress={() => setRoute('tryon')} style={[s.btn, s.btnGhost]}><Text>Back</Text></Pressable>
        <Pressable onPress={next} style={[s.btn, s.btnPrimary]} disabled={!mode}><Text style={s.btnPrimaryText}>Create Pod →</Text></Pressable>
      </View>
    </View>
  );
}

function CreatePod() {
  const { state: { looks, params }, setRoute, createRoom } = useApp();
  
  const confirm = () => {
    const room = createRoom({
      lookId: looks[0].id,
      mode: params.mode,
      durationMins: params.duration,
      title: params.title
    });
    setRoute('room_owner', { roomId: room.id });
  };
  
  return (
    <View style={{ gap: 16 }}>
      <Text style={s.h1}>Create Pod</Text>
      <Card>
        <Row label="Context" value={
          params.mode === 'friends' ? 'Friends Only' :
          params.mode === 'twins' ? 'Taste Twins' :
          params.mode === 'broader' ? 'Broader Perspectives' : 'Mix Mode'
        } />
        <Row label="Title" value={params.title} />
        <Row label="Duration" value={`${params.duration} minutes`} />
        {params.mode === 'twins' && <Text style={s.muted}>Twins pods are short & anonymous for quick signal.</Text>}
      </Card>
      <View style={{ flexDirection: 'row', gap: 8 }}>
        <Pressable onPress={() => setRoute('askhelp')} style={[s.btn, s.btnGhost]}><Text>Back</Text></Pressable>
        <Pressable onPress={confirm} style={[s.btn, s.btnPrimary]}><Text style={s.btnPrimaryText}>Create Pod →</Text></Pressable>
      </View>
    </View>
  );
}

function RoomsInbox() {
  const { state: { rooms }, setRoute, tick } = useApp();
  const [, setT] = useState(0);
  
  useEffect(() => {
    const t = setInterval(() => { tick(); setT(v => v + 1); }, 1000);
    return () => clearInterval(t);
  }, []);
  
  return (
    <View style={{ gap: 12 }}>
      <Text style={s.h1}>Rooms</Text>
      {rooms.length === 0 && <Text style={s.muted}>No rooms yet. Create one from Try-On → Ask for Help.</Text>}
      {rooms.map(r => {
        const total = r.votes.yes + r.votes.maybe + r.votes.no;
        const conf = total ? Math.round(((r.votes.yes + 0.5 * r.votes.maybe) / total) * 100) : 0;
        const remaining = Math.max(0, Math.floor((r.expiresAt - Date.now()) / 1000));
        return (
          <Card key={r.id}>
            <Text style={{ fontWeight: '700', color: '#e4e4e7' }}>{r.title} — {r.mode.toUpperCase()}</Text>
            <Text style={s.muted}>{r.status === 'active' ? `${remaining}s left` : 'Expired'} · Votes: 🔥 {r.votes.yes} · 💯 {r.votes.maybe} · ❌ {r.votes.no} · Conf {conf}%</Text>
            <View style={{ flexDirection: 'row', gap: 8, marginTop: 8 }}>
              <Pressable onPress={() => setRoute('room_owner', { roomId: r.id })} style={[s.btn, s.btnPrimary]}><Text style={s.btnPrimaryText}>Open</Text></Pressable>
              <Pressable onPress={() => setRoute('room_guest', { roomId: r.id })} style={[s.btn, s.btnGhost]}><Text>Open as Guest</Text></Pressable>
            </View>
          </Card>
        );
      })}
    </View>
  );
}

function RoomOwner() {
  const { state: { params, rooms, looks }, setRoute, vote, tick } = useApp();
  const roomId = params?.roomId;
  const room = rooms.find(r => r.id === roomId);
  const look = looks.find(l => l.id === room?.lookId);
  const [, setT] = useState(0);
  
  useEffect(() => {
    const t = setInterval(() => { tick(); setT(v => v + 1); }, 1000);
    return () => clearInterval(t);
  }, []);
  
  if (!room || !look) return <Text>Room not found.</Text>;
  
  const total = room.votes.yes + room.votes.maybe + room.votes.no;
  const conf = total ? Math.round(((room.votes.yes + 0.5 * room.votes.maybe) / total) * 100) : 0;
  const remaining = Math.max(0, Math.floor((room.expiresAt - Date.now()) / 1000));
  
  return (
    <View style={{ gap: 12 }}>
      <FullImage uri={look.uri}>
        <Confidence value={conf} />
        <VoteBar onYes={() => vote(room.id, 'yes')} onMaybe={() => vote(room.id, 'maybe')} onNo={() => vote(room.id, 'no')} />
      </FullImage>
      <Text>{room.title} • {room.mode.toUpperCase()} • {room.status === 'active' ? `${remaining}s left` : 'Expired'}</Text>
      <Text style={s.muted}>Votes: 🔥 {room.votes.yes} · 💯 {room.votes.maybe} · ❌ {room.votes.no}</Text>
      <View style={{ flexDirection: 'row', gap: 8 }}>
        <Pressable onPress={() => Alert.alert('Share', 'Stub: universal link to invite voters.')} style={[s.btn, s.btnGhost]}><Text>Invite</Text></Pressable>
        <Pressable onPress={() => setRoute('recap', { roomId: room.id })} style={[s.btn, s.btnPrimary]}><Text style={s.btnPrimaryText}>See AI Recap</Text></Pressable>
        <Pressable onPress={() => setRoute('rooms')} style={[s.btn, s.btnGhost]}><Text>Rooms</Text></Pressable>
      </View>
    </View>
  );
}

function RoomGuest() {
  const { state: { params, rooms, looks }, vote } = useApp();
  const roomId = params?.roomId;
  const room = rooms.find(r => r.id === roomId);
  const look = looks.find(l => l.id === room?.lookId);
  
  if (!room || !look) return <Text>Room not found.</Text>;
  
  const disabled = room.status !== 'active';
  
  return (
    <View style={{ gap: 12 }}>
      <FullImage uri={look.uri}>
        <VoteBar
          onYes={() => !disabled && vote(room.id, 'yes')}
          onMaybe={() => !disabled && vote(room.id, 'maybe')}
          onNo={() => !disabled && vote(room.id, 'no')}
        />
      </FullImage>
      <Text style={s.muted}>{disabled ? 'This pod has expired.' : 'Thanks for your vote!'}</Text>
    </View>
  );
}

function Recap() {
  const { state: { params, rooms }, setRoute } = useApp();
  const room = rooms.find(r => r.id === params?.roomId);
  
  if (!room) return <Text>Not found.</Text>;
  
  const total = room.votes.yes + room.votes.maybe + room.votes.no;
  const conf = total ? Math.round(((room.votes.yes + 0.5 * room.votes.maybe) / total) * 100) : 0;
  
  return (
    <View style={{ gap: 12 }}>
      <Text style={s.h1}>AI Recap</Text>
      <Card>
        <Row label="Confidence" value={`${conf}%`} />
        <Row label="Votes" value={`🔥 ${room.votes.yes} · 💯 ${room.votes.maybe} · ❌ ${room.votes.no}`} />
        <Row label="Takeaway" value={conf >= 70 ? 'Go for it. Add white sneakers.' : 'Consider an alternate: darker jacket or boots.'} />
      </Card>
      <View style={{ flexDirection: 'row', gap: 8 }}>
        <Pressable style={[s.btn, s.btnPrimary]}><Text style={s.btnPrimaryText}>Buy with Confidence</Text></Pressable>
        <Pressable onPress={() => setRoute('rooms')} style={[s.btn, s.btnGhost]}><Text>Back to Rooms</Text></Pressable>
      </View>
    </View>
  );
}

function Feed() {
  const [yes, setYes] = useState(82);
  const [maybe, setMaybe] = useState(15);
  const [no, setNo] = useState(9);
  const [hasVoted, setHasVoted] = useState(false);
  
  const total = yes + maybe + no;
  const score = useMemo(() => Math.round(((yes + 0.5 * maybe) / Math.max(total, 1)) * 100), [yes, maybe, no, total]);
  
  const handleVote = (type) => {
    if (hasVoted) return;
    setHasVoted(true);
    if (type === 'yes') setYes(v => v + 1);
    else if (type === 'maybe') setMaybe(v => v + 1);
    else if (type === 'no') setNo(v => v + 1);
    
    Alert.alert('Vote Cast!', `Thanks for voting ${type === 'yes' ? '🔥' : type === 'maybe' ? '💯' : '❌'}!`);
  };
  
  return (
    <View style={{ alignItems: 'center' }}>
      <FullImage uri="https://images.unsplash.com/photo-1520975916090-3105956dac38?q=80&auto=format&fit=crop&w=1200">
        <UserBadge handle="@mina" sub="Party • Streetwear" />
        <Confidence value={score} />
        <VoteBar
          onYes={() => handleVote('yes')}
          onMaybe={() => handleVote('maybe')}
          onNo={() => handleVote('no')}
          disabled={hasVoted}
        />
      </FullImage>
      {hasVoted && (
        <Card style={{ marginTop: 16, width: '100%', maxWidth: 420 }}>
          <Text style={s.muted}>You've already voted on this look! 🎉</Text>
        </Card>
      )}
    </View>
  );
}

/* ---------------- Helper Components ---------------- */
function FullImage({ uri, children }) {
  return (
    <View style={s.full}>
      <Image source={{ uri }} resizeMode="cover" style={StyleSheet.absoluteFillObject} />
      {children}
    </View>
  );
}

function Confidence({ value }) {
  return (
    <View style={s.confBadge}>
      <Text style={s.mutedSmall}>Confidence {value}%</Text>
    </View>
  );
}

function VoteBar({ onYes, onMaybe, onNo, disabled }) {
  return (
    <View style={s.voteBar}>
      <Pressable
        onPress={onYes}
        style={[s.emoji, disabled && { opacity: 0.5 }]}
        disabled={disabled}
      >
        <Text style={{ fontSize: 22, color: '#fff' }}>🔥</Text>
      </Pressable>
      <Pressable
        onPress={onMaybe}
        style={[s.emoji, disabled && { opacity: 0.5 }]}
        disabled={disabled}
      >
        <Text style={{ fontSize: 22, color: '#fff' }}>💯</Text>
      </Pressable>
      <Pressable
        onPress={onNo}
        style={[s.emoji, disabled && { opacity: 0.5 }]}
        disabled={disabled}
      >
        <Text style={{ fontSize: 22, color: '#fff' }}>❌</Text>
      </Pressable>
    </View>
  );
}

function Tag({ text }) {
  return (
    <View style={s.tag}>
      <Text style={s.tagText}>{text}</Text>
    </View>
  );
}

function RailIcon({ icon, onPress }) {
  return (
    <Pressable onPress={onPress} style={s.railBtn}>
      <Text style={{ fontSize: 18, color: '#fff' }}>{icon}</Text>
    </Pressable>
  );
}

function UserBadge({ handle, sub }) {
  return (
    <View style={s.userBadge}>
      <Text style={s.bold}>{handle}</Text>
      <Text style={s.mutedSmall}>{sub}</Text>
    </View>
  );
}

function Row({ label, value }) {
  return (
    <View style={{ flexDirection: 'row', justifyContent: 'space-between', paddingVertical: 6 }}>
      <Text style={s.muted}>{label}</Text>
      <Text style={{ color: '#e4e4e7' }}>{value}</Text>
    </View>
  );
}

function Card({ children, style }) {
  return <View style={[s.card, style]}>{children}</View>;
}

function Glass({ children, style }) {
  return (
    <View style={[{
      backgroundColor: 'rgba(0,0,0,0.45)',
      borderColor: 'rgba(255,255,255,0.14)',
      borderWidth: 1,
      borderRadius: 16,
      padding: 12
    }, style]}>
      {children}
    </View>
  );
}

function StatBar({ label, value }) {
  return (
    <View style={{ marginBottom: 8 }}>
      <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
        <Text style={{ color: '#d4d4d8', fontSize: 12 }}>{label}</Text>
        <Text style={{ color: '#e4e4e7', fontSize: 12, fontWeight: '700' }}>{value}%</Text>
      </View>
      <View style={{ height: 6, backgroundColor: 'rgba(255,255,255,0.15)', borderRadius: 9999, marginTop: 6 }}>
        <View style={{ width: `${value}%`, height: 6, borderRadius: 9999, backgroundColor: '#fff' }} />
      </View>
    </View>
  );
}

/* ---------------- Styles ---------------- */
const s = StyleSheet.create({
  app: { flex: 1, backgroundColor: '#000' },
  container: { flex: 1, paddingHorizontal: 16, paddingTop: 12, paddingBottom: 24, maxWidth: 720, alignSelf: 'center', width: '100%' },

  grid2: { gap: 16 },
  card: { backgroundColor: 'rgba(255,255,255,0.05)', borderColor: 'rgba(255,255,255,0.08)', borderWidth: 1, borderRadius: 24, padding: 18 },
  h1: { fontSize: 18, fontWeight: '700', color: '#e4e4e7' },
  h2: { fontSize: 16, fontWeight: '600', color: '#e4e4e7' },
  bold: { fontWeight: '700', color: '#e4e4e7' },
  muted: { color: '#a1a1aa', marginTop: 4 },
  mutedSmall: { color: '#d4d4d8', fontSize: 12 },
  inputBox: { backgroundColor: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 12, borderWidth: 1, borderColor: 'rgba(255,255,255,0.08)' },
  label: { color: '#d4d4d8', fontSize: 12 },
  inputHint: { color: '#a1a1aa', fontSize: 12, marginTop: 2 },
  inputText: { backgroundColor: 'rgba(255,255,255,0.06)', color: '#e4e4e7', paddingHorizontal: 12, paddingVertical: 10, borderRadius: 14, marginTop: 6 },

  full: { width: '100%', aspectRatio: 9 / 16, borderRadius: 24, overflow: 'hidden', position: 'relative', maxWidth: 420, alignSelf: 'center' },
  fullSmall: { width: '100%', aspectRatio: 3 / 4, borderRadius: 20, overflow: 'hidden' },
  gradDown: { ...StyleSheet.absoluteFillObject, backgroundColor: 'rgba(0,0,0,0.15)' },
  topPill: { position: 'absolute', left: 12, top: 12, backgroundColor: 'rgba(0,0,0,0.55)', paddingHorizontal: 8, paddingVertical: 4, borderRadius: 9999 },
  topPillText: { color: '#fff', fontSize: 12 },

  btn: { borderRadius: 14, paddingHorizontal: 14, paddingVertical: 10, alignItems: 'center', justifyContent: 'center' },
  btnPrimary: { backgroundColor: '#ffffff' },
  btnPrimaryText: { color: '#000000', fontWeight: '700' },
  btnGhost: { backgroundColor: 'rgba(255,255,255,0.10)' },
  btnFloating: { position: 'absolute', right: 12, bottom: 12 },

  productCard: { backgroundColor: 'rgba(255,255,255,0.05)', borderRadius: 20, overflow: 'hidden', flex: 1 },
  productTitle: { fontSize: 13, fontWeight: '600', color: '#e4e4e7' },
  productMeta: { color: '#a1a1aa', fontSize: 12, marginTop: 2 },

  row: { flexDirection: 'row', gap: 8, marginTop: 12 },
  rowBetween: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 6 },

  rail: { position: 'absolute', right: 8, top: 8, gap: 8 },
  railBtn: { backgroundColor: 'rgba(0,0,0,0.55)', paddingHorizontal: 14, paddingVertical: 12, borderRadius: 14, minWidth: 44, minHeight: 44, alignItems: 'center', justifyContent: 'center' },

  bottomLeft: { position: 'absolute', left: 8, bottom: 8, flexDirection: 'row', gap: 8 },

  userBadge: { position: 'absolute', left: 12, top: 12 },
  confBadge: { position: 'absolute', left: 12, bottom: 90, backgroundColor: 'rgba(0,0,0,0.55)', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 9999 },
  voteBar: { position: 'absolute', left: 0, right: 0, bottom: 12, flexDirection: 'row', justifyContent: 'center', gap: 12 },
  emoji: { backgroundColor: 'rgba(0,0,0,0.55)', paddingHorizontal: 18, paddingVertical: 10, borderRadius: 9999 },

  tag: { backgroundColor: 'rgba(255,255,255,0.08)', paddingHorizontal: 10, paddingVertical: 4, borderRadius: 12 },
  tagText: { color: '#d4d4d8', fontSize: 12 },

  link: { color: '#3b82f6', marginTop: 8 },
  help: { color: '#a1a1aa', fontSize: 12, marginTop: 8, textAlign: 'center' },
});
